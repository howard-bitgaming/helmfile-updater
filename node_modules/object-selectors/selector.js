// Generated by Peggy 3.0.2.
//
// https://peggyjs.org/

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { Union_Selector: peg$parseUnion_Selector };
  var peg$startRuleFunction = peg$parseUnion_Selector;

  var peg$c0 = ",";
  var peg$c1 = ".";
  var peg$c2 = ":";
  var peg$c3 = "string";
  var peg$c4 = "number";
  var peg$c5 = "bigint";
  var peg$c6 = "boolean";
  var peg$c7 = "undefined";
  var peg$c8 = "symbol";
  var peg$c9 = "null";
  var peg$c10 = "primitive";
  var peg$c11 = "object";
  var peg$c12 = "array";
  var peg$c13 = "complex";
  var peg$c14 = "existent";
  var peg$c15 = "nonexistent";
  var peg$c16 = "unique";
  var peg$c17 = "[";
  var peg$c18 = "]";
  var peg$c19 = "===";
  var peg$c20 = "==";
  var peg$c21 = "!==";
  var peg$c22 = "!=";
  var peg$c23 = "$=";
  var peg$c24 = "^=";
  var peg$c25 = "~=";
  var peg$c26 = ">=";
  var peg$c27 = "<=";
  var peg$c28 = ">";
  var peg$c29 = "<";
  var peg$c30 = "@";
  var peg$c31 = "**";
  var peg$c32 = "*";
  var peg$c33 = "?";
  var peg$c34 = "::root";
  var peg$c35 = "::first";
  var peg$c36 = "::last";
  var peg$c37 = "+";
  var peg$c38 = "\\";

  var peg$r0 = /^[A-Za-z0-9_]/;
  var peg$r1 = /^[ \t\n]/;

  var peg$e0 = peg$literalExpectation(",", false);
  var peg$e1 = peg$literalExpectation(".", false);
  var peg$e2 = peg$literalExpectation(":", false);
  var peg$e3 = peg$literalExpectation("string", false);
  var peg$e4 = peg$literalExpectation("number", false);
  var peg$e5 = peg$literalExpectation("bigint", false);
  var peg$e6 = peg$literalExpectation("boolean", false);
  var peg$e7 = peg$literalExpectation("undefined", false);
  var peg$e8 = peg$literalExpectation("symbol", false);
  var peg$e9 = peg$literalExpectation("null", false);
  var peg$e10 = peg$literalExpectation("primitive", false);
  var peg$e11 = peg$literalExpectation("object", false);
  var peg$e12 = peg$literalExpectation("array", false);
  var peg$e13 = peg$literalExpectation("complex", false);
  var peg$e14 = peg$literalExpectation("existent", false);
  var peg$e15 = peg$literalExpectation("nonexistent", false);
  var peg$e16 = peg$literalExpectation("unique", false);
  var peg$e17 = peg$literalExpectation("[", false);
  var peg$e18 = peg$literalExpectation("]", false);
  var peg$e19 = peg$literalExpectation("===", false);
  var peg$e20 = peg$literalExpectation("==", false);
  var peg$e21 = peg$literalExpectation("!==", false);
  var peg$e22 = peg$literalExpectation("!=", false);
  var peg$e23 = peg$literalExpectation("$=", false);
  var peg$e24 = peg$literalExpectation("^=", false);
  var peg$e25 = peg$literalExpectation("~=", false);
  var peg$e26 = peg$literalExpectation(">=", false);
  var peg$e27 = peg$literalExpectation("<=", false);
  var peg$e28 = peg$literalExpectation(">", false);
  var peg$e29 = peg$literalExpectation("<", false);
  var peg$e30 = peg$literalExpectation("@", false);
  var peg$e31 = peg$literalExpectation("**", false);
  var peg$e32 = peg$literalExpectation("*", false);
  var peg$e33 = peg$literalExpectation("?", false);
  var peg$e34 = peg$literalExpectation("::root", false);
  var peg$e35 = peg$literalExpectation("::first", false);
  var peg$e36 = peg$literalExpectation("::last", false);
  var peg$e37 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "_"], false, false);
  var peg$e38 = peg$literalExpectation("+", false);
  var peg$e39 = peg$literalExpectation("\\", false);
  var peg$e40 = peg$otherExpectation("whitespace");
  var peg$e41 = peg$classExpectation([" ", "\t", "\n"], false, false);

  var peg$f0 = function(selectors) {
	return Object.assign(function union(obj, references, mode) {
		// For some reason, this is WAY faster than doing selectors.flatMap():
		let result = selectors[0](obj, references, mode); // This is safe, because the grammar guarantees there is at least one selector
		for (let i = 1; i < selectors.length; i++) 
			result = result.concat(selectors[i](obj, references, mode));
		return result;
	}, {
		// The selector is ambiguous if it is a union of more than one selectors, 
		// or if there is only one selector and that selector is ambiguous itself
		ambiguous: selectors.length > 1 || selectors[0].ambiguous, 
		source: text()
	});
};
  var peg$f1 = function(head, tail) { 
		return head // head: property descriptors are parsed as arrays (because they might include conditions)
			.concat(tail.flat()); // tail: the tail is an array of Accessor_selectors because of the asterisk operator
								  // flat(): accessor selectors are themselves arrays as well (see their parse return value)
	};
  var peg$f2 = function(selector) {
		// Return value is the function select, but we will set some meta-properties of the selector on it:
		// - Whether or not the selector is ambiguous
		// - The raw source text of the selector
		return Object.assign(function select(obj, references, mode) {
			const resolution = [
				{ target: obj, selection: [] }
			]
			resolution.root = obj;
			selector?.forEach(element => element(resolution, references, mode));
			return resolution;
		}, { 
			// The selector as a whole is ambiguous if at least one of its constituents is ambiguous (multi-valued)
			ambiguous: selector.some(fn => fn.ambiguous),
			source: text()
		});
	};
  var peg$f3 = function() { return input === '' };
  var peg$f4 = function() {
		console.warn('Using the empty selector is deprecated. Use ::root instead.');
		return Object.assign(function empty(obj) { 
			return [ { target: { obj }, selection: [ 'obj' ] } ];
		}, {
			ambiguous: false,
			source: text()
		});
	};
  var peg$f5 = function(accessor, property) { 		
		property.unshift(accessor); // Faster than [ accessor, ...property ]
		return property;
	};
  var peg$f6 = function() {
		return function access(resolution) {
			let result = [];
			for (let item of resolution) {
				result = result.concat(item.selection.map(property => ({
					target: item.target[property],
					selection: []
				})));
			}
			// Rebuild resolution in-place:
			// (This is faster than doing resolution.splice() or pushing each result item to an empty array)
			resolution.length = result.length;
			for (let i = 0; i < result.length; i++) resolution[i] = result[i];
		}
	};
  var peg$f7 = function(property, meta, condition) { 
		// This is faster than doing [ property, ...condition, validate ]
		meta.unshift(property);
		meta = meta.concat(condition);
		meta.push(
			function validate(resolution, references, mode = MODE_NORMAL) {
				// Helper function that checks whether the target has a property of a given name
				// Returns false if the target is null or undefined or a primitive,
				// otherwise checks whether the property is an own OR INHERITED property
				// (accessor properties are defined on the prototype and would not be caught by hasOwnProperty)
				function hasProperty(tgt, prop) {
					if (!tgt) return false;
					else if (typeof tgt === 'object') return prop in tgt
					else return false;
				}
				if (mode) {
					// Run through the current resolutions backwards, because we may be changing them
					for (let i = resolution.length - 1; i >= 0; i--) {
						// There is an "invalid" resolution if
						// - no matching selections were found (see below)
						// - or a set selection does not exist on the target
						for (let j = resolution[i].selection.length - 1; j >= 0; j--) {
							if (!hasProperty(resolution[i].target, resolution[i].selection[j])) {
								switch(mode) {
									// In strict mode, throw an error
									case MODE_STRICT: throw new TypeError(`Object has no properties matching ${text()}`);
									// In lenient mode, remove the offending selection	
									case MODE_LENIENT: resolution[i].selection.splice(j, 1);
								}
							}
						}
						// If after removing all offending selections none are left, remove the entire resolution in lenient
						// mode or throw in strict mode
						if (resolution[i].selection.length === 0)
							switch (mode) {
								case MODE_STRICT: throw new TypeError(`Object has no properties matching ${text()}`)
								case MODE_LENIENT: resolution.splice(i, 1);
							}
					}
				}
			});

		return meta;
	};
  var peg$f8 = function(regex) {
		// Wildcard selectors are always ambiguous
		return Object.assign(function selectByRegex(resolution, references, mode) {
			for (let item of resolution) {
				if (mode === MODE_LENIENT && item.target == null)
					item.selection = [];
				else {
					if (item.target == undefined) throw new TypeError(`Cannot select ambiguously on ${item.target}`);
					item.selection = [];
					for (const key in item.target)
						if (regex.test(key))
							item.selection.push(key)					
				}
			}
		}, { ambiguous: true });
	};
  var peg$f9 = function(name) {
		return function selectByName(resolution) {
			resolution.forEach(item => item.selection = [ name ]);
		}          
	};
  var peg$f10 = function(pseudo) {
		function selectRoot(resolution) {
			resolution.forEach(item => {
				item.target = { '::root': resolution.root };
				item.selection = [ '::root' ];
			});			
		}
		function selectFirst(resolution) {
			resolution.forEach(item => {
				if (Array.isArray(item.target) || typeof item.target === 'string') 
					item.selection = [ '0' ];
				else if (typeof item.target === 'object' && item.target !== null) 
					// We have to do this via a for...in loop that we break from immediately,
					// in order to catch INHERITED properties as well as own
					for (let key in item.target) {
						item.selection = [ key ];
						break; 
					}
				else
					item.selection = [];
			});
		}
		function selectLast(resolution) {
			resolution.forEach(item => {
				if (Array.isArray(item.target) || typeof item.target === 'string')
					item.selection = [ String(item.target.length - 1) ];
				else if (typeof item.target === 'object' && item.target !== null) 
					// We have to do this via a for...in loop that we break from immediately,
					// in order to catch INHERITED properties as well as own
					for (let key in item.target) {
						item.selection = [ key ];						
					}
				else
					item.selection = [];
			});
		}
		const PSEUDO_PROPERTIES = {
			'::root': selectRoot,
			'::first': selectFirst,
			'::last': selectLast
		}
		return PSEUDO_PROPERTIES[pseudo];
	};
  var peg$f11 = function(meta) {
		// Helper function to create the type-selection function that filters out values for which the typeguard predicate is true
		function createSelectFunction(typeguard) {
			return function selectByType(resolution, references, mode) {
				for (let item of resolution) {
					for (let i = 0; i < item.selection.length; i++) {					
						if (typeguard(item.target[item.selection[i]]))
							delete item.selection[i];
					}				
					item.selection = item.selection.filter(sel => sel !== undefined);
				}			
			}
		}
		const PRIMITIVES = [ 'string', 123, 123n, true, undefined, Symbol(), null ]

		switch (meta) {
		case 'string': return createSelectFunction(subject => typeof subject !== 'string');
		case 'number': return createSelectFunction(subject => typeof subject !== 'number');
		case 'bigint': return createSelectFunction(subject => typeof subject !== 'bigint');
		case 'boolean': return createSelectFunction(subject => typeof subject !== 'boolean');
		case 'undefined': return createSelectFunction(subject => typeof subject !== 'undefined');
		case 'symbol': return createSelectFunction(subject => typeof subject !== 'symbol');
		case 'null': return createSelectFunction(subject => subject !== null);
		case 'primitive': return createSelectFunction(subject => typeof subject === 'object' && subject !== null);
		case 'object': return createSelectFunction(subject => typeof subject !== 'object' || subject === null || Array.isArray(subject));
		case 'array': return createSelectFunction(subject => !Array.isArray(subject));
		case 'complex': return createSelectFunction(subject => typeof subject !== 'object' || subject === null);

		case 'existent': return createSelectFunction(subject => subject == undefined);
		case 'nonexistent': return createSelectFunction(subject => subject != undefined);
		case 'unique': 
			return function selectUnique(resolution, references, mode) {
				// Run through the resolutions and for all selections, remove any duplicates, as determined by the comparator function.
				//
				// For this, only check items' selections that come AFTER the current one, e.g. given the following resolutions:
				//       a       b
				//     0 1 2   0   1		a0 a1 a2 b0 b2
				// 							   ^   ^
				// 							   |   |
				//				when (i,j) are here...
				// 							...start (k,l) checking from here
				for (let i = 0; i < resolution.length; i++)
					for (let j = 0; j < resolution[i].selection.length; j++)
						for (let k = i; k < resolution.length; k++) {
							for (let l = k === i ? j + 1 : 0; l < resolution[k].selection.length; l++) {
								const a = resolution[i].target[resolution[i].selection[j]];
								const b = resolution[k].target[resolution[k].selection[l]];
								if (b !== undefined && a === b)
									// Just delete for now, because that is faster than repeated splicing.
									// We will remove all deleted entries at the end.
									delete resolution[k].selection[l];
							}
							resolution[k].selection = resolution[k].selection.filter(sel => sel !== undefined);
						}			
			}
		}
	};
  var peg$f12 = function(condition) {
		return function selectByCondition(resolution, references, mode) {
			const { selector, operator, valueFn } = condition;
			const value = valueFn(references);
			for (let item of resolution) 				
				item.selection = item.selection.filter(selectedProperty => {
					// Normalize condition selector from tuples (target, multiple selections) to 
					// (target, single selection)
					const conditionProperties = selector(item.target[selectedProperty], references, mode)
						.flatMap(({ target, selection }) => selection.map(conditionProperty => ({ target, conditionProperty })));

					return conditionProperties.length > 0 && conditionProperties.every(({ target, conditionProperty }) => operator(target[conditionProperty], value));
				});
		}
	};
  var peg$f13 = function(selector) {
		return { selector, operator: Boolean, valueFn: () => null };
	};
  var peg$f14 = function(selector, operator, valueFn) {     	
		if (operator.name === '~=') {
			let _valueFn = valueFn;
			valueFn = references => new RegExp(_valueFn(references));
		}		
		return { selector, operator, valueFn };
	};
  var peg$f15 = function(operator) {
		return {
			'==': (a,b) => a == b,
			'===': (a,b) => a === b,
			'!=': (a,b) => a != b,
			'!==': (a,b) => a !== b,
			'$=': (a,b) => a?.endsWith(b),
			'^=': (a,b) => a?.startsWith(b),
			'~=': (a,b) => b.test(a),
			'>': (a,b) => a > b,
			'>=': (a,b) => a >= b,
			'<=': (a,b) => a <= b,
			'<': (a,b) => a < b
		}[operator];
	};
  var peg$f16 = function(reference) {
		// Return a function that resolves the reference against the passed references object
		return references => references[reference];
	};
  var peg$f17 = function(identifier) { 
		// Return a constant function that returns identifier, so as to present the same interface as a reference value
		return () => identifier; 
	};
  var peg$f18 = function(symbols) { return symbols.join(''); };
  var peg$f19 = function(descriptor) { return new RegExp('^' + descriptor.flat(Infinity).join('') + '$') };
  var peg$f20 = function(wildcard) {
		switch (wildcard) {
			case '*': return '\\w*';
			case '?': return '\\w';
		}
	};
  var peg$f21 = function(char) { return char; };
  var peg$f22 = function() { return; };
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseUnion_Selector() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseSelector();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = [];
      s6 = peg$parse_();
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$parse_();
      }
      s6 = peg$parseUnion_Operator();
      if (s6 !== peg$FAILED) {
        s7 = [];
        s8 = peg$parse_();
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          s8 = peg$parse_();
        }
        s5 = [s5, s6, s7];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseSelector();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUnion_Operator() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 44) {
      s0 = peg$c0;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

    return s0;
  }

  function peg$parseSelector() {
    var s0, s1, s2, s3, s4;

    s0 = peg$parseEmpty_selector();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseProperty_descriptor();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseAccessor_selector();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseAccessor_selector();
        }
        peg$savedPos = s1;
        s1 = peg$f1(s2, s3);
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f2(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseEmpty_selector() {
    var s0, s1;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f3();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f4();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAccessor_selector() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseAccessor();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseProperty_descriptor();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f5(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAccessor() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (input.charCodeAt(peg$currPos) === 46) {
      s2 = peg$c1;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      peg$savedPos = s0;
      s0 = peg$f6();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseProperty_descriptor() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseProperty_name();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      s3 = [];
      s4 = peg$parseMeta_property();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseMeta_property();
      }
      s4 = [];
      s5 = peg$parse_();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parse_();
      }
      s5 = [];
      s6 = peg$parseCondition();
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$parseCondition();
      }
      peg$savedPos = s0;
      s0 = peg$f7(s1, s3, s5);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseProperty_name() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseProperty_name_with_wildcard();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f8(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f9(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePseudo_Property();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f10(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseMeta_property() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 58) {
      s1 = peg$c2;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c3) {
        s2 = peg$c3;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c4) {
          s2 = peg$c4;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c5) {
            s2 = peg$c5;
            peg$currPos += 6;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c6) {
              s2 = peg$c6;
              peg$currPos += 7;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c7) {
                s2 = peg$c7;
                peg$currPos += 9;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c8) {
                  s2 = peg$c8;
                  peg$currPos += 6;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e8); }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c9) {
                    s2 = peg$c9;
                    peg$currPos += 4;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e9); }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 9) === peg$c10) {
                      s2 = peg$c10;
                      peg$currPos += 9;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e10); }
                    }
                    if (s2 === peg$FAILED) {
                      if (input.substr(peg$currPos, 6) === peg$c11) {
                        s2 = peg$c11;
                        peg$currPos += 6;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e11); }
                      }
                      if (s2 === peg$FAILED) {
                        if (input.substr(peg$currPos, 5) === peg$c12) {
                          s2 = peg$c12;
                          peg$currPos += 5;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e12); }
                        }
                        if (s2 === peg$FAILED) {
                          if (input.substr(peg$currPos, 7) === peg$c13) {
                            s2 = peg$c13;
                            peg$currPos += 7;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e13); }
                          }
                          if (s2 === peg$FAILED) {
                            if (input.substr(peg$currPos, 8) === peg$c14) {
                              s2 = peg$c14;
                              peg$currPos += 8;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e14); }
                            }
                            if (s2 === peg$FAILED) {
                              if (input.substr(peg$currPos, 11) === peg$c15) {
                                s2 = peg$c15;
                                peg$currPos += 11;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e15); }
                              }
                              if (s2 === peg$FAILED) {
                                if (input.substr(peg$currPos, 6) === peg$c16) {
                                  s2 = peg$c16;
                                  peg$currPos += 6;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e16); }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f11(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCondition() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      s3 = peg$parseUnaryCondition();
      if (s3 === peg$FAILED) {
        s3 = peg$parseBinaryCondition();
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parse_();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 93) {
          s5 = peg$c18;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f12(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnaryCondition() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseBinaryCondition();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSelector();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f13(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBinaryCondition() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseSelector();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      s3 = peg$parseOperator();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parse_();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parse_();
        }
        s5 = peg$parseValue();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f14(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOperator() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c19) {
      s1 = peg$c19;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c20) {
        s1 = peg$c20;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c21) {
          s1 = peg$c21;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c22) {
            s1 = peg$c22;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c23) {
              s1 = peg$c23;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c24) {
                s1 = peg$c24;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e24); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c25) {
                  s1 = peg$c25;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e25); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c26) {
                    s1 = peg$c26;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e26); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c27) {
                      s1 = peg$c27;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e27); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 62) {
                        s1 = peg$c28;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e28); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 60) {
                          s1 = peg$c29;
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e29); }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f15(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseValue() {
    var s0;

    s0 = peg$parseReferenceValue();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLiteralValue();
    }

    return s0;
  }

  function peg$parseReferenceValue() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseReference_character();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f16(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseReference_character() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 64) {
      s0 = peg$c30;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }

    return s0;
  }

  function peg$parseLiteralValue() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f17(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIdentifier() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseSymbol();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseSymbol();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f18(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseProperty_name_with_wildcard() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$currPos;
    s3 = peg$parseIdentifier();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = peg$parseWildcard();
    if (s4 !== peg$FAILED) {
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    peg$silentFails--;
    if (s2 !== peg$FAILED) {
      peg$currPos = s1;
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseWildcard();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = [];
      s5 = peg$currPos;
      s6 = peg$parseIdentifier();
      if (s6 !== peg$FAILED) {
        s7 = peg$parseWildcard();
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s6 = [s6, s7];
        s5 = s6;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$parseIdentifier();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseWildcard();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      s5 = peg$parseWildcard();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s3 = [s3, s4, s5];
      s2 = s3;
      peg$savedPos = s0;
      s0 = peg$f19(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWildcard() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.substr(peg$currPos, 2) === peg$c31) {
      s2 = peg$c31;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 42) {
        s2 = peg$c32;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e32); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 63) {
          s2 = peg$c33;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f20(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePseudo_Property() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c34) {
      s0 = peg$c34;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c35) {
        s0 = peg$c35;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c36) {
          s0 = peg$c36;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e36); }
        }
      }
    }

    return s0;
  }

  function peg$parsePermitted_character() {
    var s0;

    if (peg$r0.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }

    return s0;
  }

  function peg$parseReserved_character() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseAccessor();
    if (s1 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c37;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c17;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s1 = peg$c18;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e18); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s1 = peg$c2;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s1 === peg$FAILED) {
              s1 = peg$parseWildcard();
              if (s1 === peg$FAILED) {
                s1 = peg$parseEscape_character();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseReference_character();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseOperator();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseUnion_Operator();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parse_();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseEscape_character() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 92) {
      s0 = peg$c38;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }

    return s0;
  }

  function peg$parseSymbol() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseEscape_character();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseReserved_character();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f21(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsePermitted_character();
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f22();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }

    return s0;
  }


	const MODE_NORMAL = 0;
	const MODE_STRICT = 1;
	const MODE_LENIENT = 2;

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export {
  peg$SyntaxError as SyntaxError,

  peg$parse as parse
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdG9yLnBlZyJdLCJuYW1lcyI6WyJVbmlvbl9TZWxlY3RvciIsIlVuaW9uX09wZXJhdG9yIiwiU2VsZWN0b3IiLCJFbXB0eV9zZWxlY3RvciIsIkFjY2Vzc29yX3NlbGVjdG9yIiwiQWNjZXNzb3IiLCJQcm9wZXJ0eV9kZXNjcmlwdG9yIiwiUHJvcGVydHlfbmFtZSIsIk1ldGFfcHJvcGVydHkiLCJDb25kaXRpb24iLCJVbmFyeUNvbmRpdGlvbiIsIkJpbmFyeUNvbmRpdGlvbiIsIk9wZXJhdG9yIiwiVmFsdWUiLCJSZWZlcmVuY2VWYWx1ZSIsIlJlZmVyZW5jZV9jaGFyYWN0ZXIiLCJMaXRlcmFsVmFsdWUiLCJJZGVudGlmaWVyIiwiUHJvcGVydHlfbmFtZV93aXRoX3dpbGRjYXJkIiwiV2lsZGNhcmQiLCJQc2V1ZG9fUHJvcGVydHkiLCJQZXJtaXR0ZWRfY2hhcmFjdGVyIiwiUmVzZXJ2ZWRfY2hhcmFjdGVyIiwiRXNjYXBlX2NoYXJhY3RlciIsIlN5bWJvbCIsIl8iLCIkaW5pdGlhbGl6ZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBTWdFO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEU7cUNBUTZEO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLENBQUMsRTttQ0FBSTtBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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Ozs7Ozs7Ozs7OztXQXdCUkMsdUJBQWM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBV2RDLDBCQUFpQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztXQU1qQkMsaUJBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FxQlJDLDRCQUFtQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztXQWlEbkJDLHNCQUFhOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztXQXdFYkMsc0JBQWE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FnRWJDLGtCQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBb0JUQyx1QkFBYzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztXQVNkQyx3QkFBZTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztXQVFmQyxpQkFBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FnQlJDLGNBQUs7Ozs7Ozs7Ozs7O1dBRUxDLHVCQUFjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBS2RDLDRCQUFtQjs7Ozs7Ozs7Ozs7Ozs7V0FDbkJDLHFCQUFZOzs7Ozs7Ozs7Ozs7OztXQUtaQyxtQkFBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FRVkMsb0NBQTJCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FJM0JDLGlCQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBU1JDLHdCQUFlOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztXQUVmQyw0QkFBbUI7Ozs7Ozs7Ozs7Ozs7O1dBRW5CQywyQkFBa0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBRWxCQyx5QkFBZ0I7Ozs7Ozs7Ozs7Ozs7O1dBR2hCQyxlQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBR05DLFVBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBblhBQztBQUNEQTtBQUNBQTtBQUNBQSJ9
